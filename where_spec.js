// Generated by CoffeeScript 1.4.0
(function() {

  describe("when where is called inside a describe block", function() {
    where("a", function() {
      return 1;
    });
    beforeEach(function() {
      return this.beforeValue = this.a;
    });
    it("a spec and beforeEach level property is defined whose reference returns the value returned by the given block", function() {
      expect(this.a).toEqual(1);
      return expect(this.beforeValue).toEqual(1);
    });
    it("a spec and beforeEach level property is defined that when set with = is overriden with that value", function() {
      this.a = 5;
      expect(this.a).toEqual(5);
      return expect(this.beforeValue).toEqual(1);
    });
    describe("containing chained symbols relating in an order different than their definition", function() {
      where("b", function() {
        return this.c + 1;
      });
      where("c", function() {
        return 2;
      });
      it("expectation blocks understand their relationship and gives the expected value", function() {
        return expect(this.b).toEqual(3);
      });
      return it("expectation blocks use the value defined at the top level for the unoverrided value", function() {
        expect(this.a).toEqual(1);
        return expect(this.beforeValue).toEqual(1);
      });
    });
    describe("referring to a symbol defined by a where at a higher level than the current suite", function() {
      where("b", function() {
        return this.a + 5;
      });
      return it("expectation blocks use the definition given by the where in that ancestor suite", function() {
        return expect(this.b).toEqual(6);
      });
    });
    describe("overriding a symbol defined by another where in a higher level suite", function() {
      where("a", function() {
        return 2;
      });
      return it("expectation blocks and all levels of beforeEach blocks use the overriding value", function() {
        expect(this.a).toEqual(2);
        return expect(this.beforeValue).toEqual(2);
      });
    });
    describe("and the symbol defined by that where is not referred to", function() {
      where("someVal", function() {
        return this.called = true;
      });
      return it("the given definition block is not called", function() {
        return expect(this.called).not.toEqual(true);
      });
    });
    describe("referred to inside a expectation block", function() {
      where("someVal", function() {
        this.count = (this.count || 0) + 1;
        return "b";
      });
      return it("has its block called only once and that returned value cached for subsequent references", function() {
        expect(this.someVal).toEqual("b");
        expect(this.someVal).toEqual("b");
        expect(this.someVal).toEqual("b");
        return expect(this.count).toEqual(1);
      });
    });
    return describe("and refers to a spec's member variable", function() {
      where("d", function() {
        return this.specVal + 2;
      });
      return it("uses the currently running Spec as this for determining that member's value", function() {
        this.specVal = 97;
        return expect(this.d).toEqual(99);
      });
    });
  });

}).call(this);
